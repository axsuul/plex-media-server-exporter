name: docker

on:
  push:
    branches:
      - '**'
    tags:
      - '*.*.*'

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker buildx
        uses: docker/setup-buildx-action@v1

      - name: Set up Docker buildx cache
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine release tag

        # Converts GITHUB_REF (e.g. refs/tags/0.0.2) to RELEASE_TAG (e.g. 0.0.2)
        run: |
          echo "RELEASE_TAG=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Build Docker image tags
        run: |
          echo 'DOCKER_IMAGE_TAGS<<EOF' >> $GITHUB_ENV
          echo "ghcr.io/${{ github.repository }}:${{ github.sha }}" >> $GITHUB_ENV

          # Add release tag if it exists
          if [[ $RELEASE_TAG }} ]]; then
            echo ",ghcr.io/${{ github.repository }}:$RELEASE_TAG" >> $GITHUB_ENV
          fi

          # Only add latest tag if master branch
          if [[ ${{ github.ref_name }} == 'master' ]]; then
            echo ",ghcr.io/${{ github.repository }}:latest" >> $GITHUB_ENV
          fi

          echo 'EOF' >> $GITHUB_ENV

      - name: Build and push Docker image to GitHub Container Registry
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ env.DOCKER_IMAGE_TAGS }}
          build-args: |
            git_commit_id=${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: Update Docker buildx cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
